from manim import *

class task1transformation(Scene):
    def construct(self):
        a = ValueTracker(1)
        b = ValueTracker(1)
        c = ValueTracker(0)
        d = ValueTracker(0)
        nplane=NumberPlane(y_range=[-40, 40, 1], x_range=[-40,40,1], x_length=5, y_length=5).scale(3)
        axis_labels = nplane.get_axis_labels(x_label="x", y_label="y")
        asymptote1 = nplane.plot(lambda x : a.get_value()*(10-(b.get_value()*x+c.get_value()))+d.get_value(), color = YELLOW)
        asymptote1.add_updater(lambda func : func.become(nplane.plot(lambda x : a.get_value()*(10-(b.get_value()*x+c.get_value()))+d.get_value(),color = YELLOW)))
        asymptote2 = nplane.plot(lambda x : a.get_value()*(6)+d.get_value(), color = YELLOW)
        asymptote2.add_updater(lambda func : func.become(nplane.plot(lambda x : a.get_value()*(6)+d.get_value(), color = YELLOW)))
        asymptote31 = ImplicitFunction(lambda x, y : x, color = YELLOW).move_to(nplane.coords_to_point(4, 0))
        asymptote32 = ImplicitFunction(lambda x, y : x, color = YELLOW).move_to(nplane.coords_to_point(5/2, 0))
        asymptote33 = ImplicitFunction(lambda x, y : x, color = YELLOW).move_to(nplane.coords_to_point(-5, 0))
        maxpoint1 = Dot().move_to(nplane.coords_to_point(6,0))
        minpoint1 = Dot().move_to(nplane.coords_to_point(-3,5))
        intercept1 = Dot().move_to(nplane.coords_to_point(0,6))
        maxpoint2 = Dot().move_to(nplane.coords_to_point(9/2,0))
        minpoint2 = Dot().move_to(nplane.coords_to_point(-9/2,5))
        intercept2 = Dot().move_to(nplane.coords_to_point(-3/2,6))
        maxpoint3 = Dot().move_to(nplane.coords_to_point(-9,0))
        minpoint3 = Dot().move_to(nplane.coords_to_point(9,5))
        intercept3 = Dot().move_to(nplane.coords_to_point(3,6))
        maxpoint4 = Dot().move_to(nplane.coords_to_point(-9,0))
        minpoint4 = Dot().move_to(nplane.coords_to_point(9,10))
        intercept4 = Dot().move_to(nplane.coords_to_point(3,12))
        maxpoint5 = Dot().move_to(nplane.coords_to_point(-9,1/2))
        minpoint5 = Dot().move_to(nplane.coords_to_point(9,21/2))
        intercept5 = Dot().move_to(nplane.coords_to_point(3,25/2))
        function = MathTex(f"y={round(a.get_value(),1)}f({round(b.get_value(),1)}x+{round(c.get_value(),1)})+{round(d.get_value(),1)}").move_to([0,-3.5,0], aligned_edge=DOWN)
        function.add_updater(lambda f : f.become(MathTex(f"y={round(a.get_value(),1)}f({round(b.get_value(),1)}x+{round(c.get_value(),1)})+{round(d.get_value(),1)}")).move_to([0,-3.5,0], aligned_edge=DOWN))



        self.play(Create(nplane), Write(axis_labels))
        self.play(Create(asymptote1), Create(asymptote2), Create(asymptote31), Create(minpoint1), Create(maxpoint1), Create(intercept1))
        self.play(Write(function))
        self.play(c.animate.set_value(3/2), Transform(maxpoint1, maxpoint2), Transform(minpoint1, minpoint2), Transform(intercept1, intercept2), Transform(asymptote31, asymptote32))
        Wait(0.5)
        self.play(b.animate.set_value(-1/2), Transform(maxpoint1, maxpoint3), Transform(minpoint1, minpoint3), Transform(intercept1, intercept3), Transform(asymptote31, asymptote33))
        Wait(0.5)
        self.play(a.animate.set_value(2), Transform(maxpoint1, maxpoint4), Transform(minpoint1, minpoint4), Transform(intercept1, intercept4))
        Wait(0.5)
        self.play(d.animate.set_value(1/2), Transform(maxpoint1, maxpoint5), Transform(minpoint1, minpoint5), Transform(intercept1, intercept5))